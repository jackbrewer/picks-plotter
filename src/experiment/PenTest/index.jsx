import React from 'react'
import { arrayOf, number, string } from 'prop-types'

import Svg from '../../component/Svg'
import Group from '../../component/Group'
import Rect from '../../component/Rect'
import Polyline from '../../component/Polyline'

const PenTest = ({
  width,
  height,
  printWidth,
  printHeight,
  densities,
  speeds,
  lineWidth,
  title,
}) => {
  const safe = 10
  const safeWidth = width - safe * 2
  // const safeHeight = height - safe * 2

  const config = {
    densities: { gutter: 8 },
    speeds: { count: 8, gap: 2.7, gutter: 5 },
  }

  return (
    <Svg
      width={`${printWidth}mm`}
      height={`${printHeight}mm`}
      viewBox={`0 0 ${width} ${height}`}
    >
      <Group label="1+S30 Title">
        <text
          textAnchor="left"
          x={safe - 1}
          y={safe + 6}
          fontFamily="Open Sans, sans-serif"
          fontSize="6"
        >
          {title}
        </text>
      </Group>

      <Group label="1+S30 Density">
        <text
          textAnchor="left"
          x={safe - 0.5}
          y={30}
          fontFamily="Open Sans, sans-serif"
          fontSize="5"
        >
          Line Densities (mm)
        </text>
        {densities.map((d, i) => {
          const colWidth =
            (safeWidth - config.densities.gutter * (densities.length - 1)) /
            densities.length
          const start = colWidth * i + safe + config.densities.gutter * i
          const end = colWidth * (i + 1) + safe + config.densities.gutter * i
          const lines = []
          for (let i = start; i <= end; i += d) {
            lines.push(+i.toFixed(5))
          }

          return (
            <g key={`density:${i}`}>
              <text
                textAnchor="left"
                x={start}
                y="66"
                fontFamily="Open Sans, sans-serif"
                fontSize="4"
              >
                {d}
              </text>
              {lines.map((l) => (
                <Polyline
                  key={`density:line:${l}`}
                  points={[
                    [l, 35],
                    [l, 60],
                  ]}
                  strokeWidth={lineWidth}
                />
              ))}
            </g>
          )
        })}
      </Group>

      <Group label="1+S30 Speeds">
        <text
          textAnchor="left"
          x={safe - 1}
          y={80}
          fontFamily="Open Sans, sans-serif"
          fontSize="5"
        >
          Drawing Speed
        </text>

        {speeds.map((speed, i) => {
          const start =
            safe +
            i * config.speeds.count * config.speeds.gap +
            i * config.speeds.gutter
          return (
            <Group key={`speed:${speed}`} label={`2+S${speed} Speed: ${speed}`}>
              <text
                textAnchor="left"
                x={start}
                y="146"
                fontFamily="Open Sans, sans-serif"
                fontSize="4"
              >
                {speed}
              </text>
              {[...Array(config.speeds.count).keys()].map((line, j) => {
                const lineStart = start + j * config.speeds.gap
                return (
                  <Polyline
                    key={`speeds:line:${line}`}
                    points={[
                      [lineStart, 85],
                      [lineStart, 140],
                    ]}
                    strokeWidth={lineWidth}
                  />
                )
              })}
            </Group>
          )
        })}
      </Group>

      <Group label="% Placeholder">
        <Rect width={width} height={height} />
      </Group>
    </Svg>
  )
}

PenTest.defaultProps = {
  printWidth: 200,
  printHeight: 200,
  width: 200,
  height: 200,
  densities: [0.3, 0.5, 0.7, 0.9, 1.1, 1.3],
  speeds: [10, 15, 20, 25, 30, 40, 50],
  lineWidth: 0.3,
  title: 'Pen:',
}

PenTest.propTypes = {
  width: number,
  height: number,
  printWidth: number,
  printHeight: number,
  densities: arrayOf(number),
  speeds: arrayOf(number),
  lineWidth: number,
  title: string,
}

export default PenTest
